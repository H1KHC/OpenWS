- [ ] multiple basewindow
    [x] std::map<GLFWwindow*, wsBaseWindow*> baseWindows
    [x] abandon wsGlfwWindow
    [x] make GLFWwindow* available in every wsWindow struct
    [x] (in wsInit)
        remove all about window creation
    [x] (in Creation)
        if (fatherWindow == WS_ROOT_WINDOW_ID) {
            createGLFWwindow();
        }
    [x] (in glfwReceivers)
        type ***receiver(GLFWwindow* window, ...) {
            baseWindows[window]->receive();
        }
    [x] (in all functions that has parameter windowID)
        if(windowID == WS_ROOT_WINDOW_ID) {
            wsSetError(WS_ERR_ILLEGAL_OPERATION);
        }
    [x] (in user callback)
            currentBaseWindow check & set
    [x] (in wsWindow Creation)
        Create framebuffer when window created
    [x] (in termination)
        for(window: baseWindows) wsClose(window)
    [x] currentBaseWindow
        [x] window Create
        [x] window focus
    [x] wsMain
        for(window: baseWindows)
    [x] fix display coordinary issue
    [x] example adjust
    [ ] fps control
        [x] fpsClock in each baseWindow
        [x] just to check whether to call display callback
        [ ] real control in window flush
            [ ] wsSetFPS
            [ ] needRedraw->displayCallback->needRedisplay->display
                [ ] unique depth for each window
                [ ] check if(needRedisplay) then display
    [-] check all currentBaseWindow changing function
        to prevent Context change in display (currently only single thread)
    [-] wsTerminate(add param force: do not wait for other threads)
    [ ] wsGetTopWindow(int windowID)
    [ ] wsBaseWindow contextInUsing
    [ ] pushdown tags in receivers
